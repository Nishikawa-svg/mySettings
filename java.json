{
	// Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	"Print to console" : {
		"prefix": "java_templete",
		"body": [
			"import java.util.*;",
			"import java.io.*;",
			"",
			"public class Main {",
			"  static final int INF = (int)1e9+100;",
			"  static final long INFL = (long)1e18+100;",
			"  static final long MOD = (int)1e9+7;",
			"",
			"  public static void main(String[] args) {",
			"    FastScanner fs = new FastScanner();",
			"  ",
			"  ",
			"    PrintWriter pw = new PrintWriter(System.out);",
			"    pw.close();",
			"  }",
			"}",
			"",
			"",
			"class FastScanner {",
			"  private InputStream in = System.in;",
			"  private byte[] buffer = new byte[1024];",
			"  private int length = 0, p = 0;",
			"  private boolean hasNextByte() {",
			"    if (p < length) return true;",
			"    else{",
			"      p = 0;",
			"      try{",
			"        length = in.read(buffer);",
			"      }catch(Exception e){",
			"        e.printStackTrace();",
			"      }",
			"      if(length == 0) return false;",
			"    }",
			"    return true;",
			"  }",
			"  private int readByte() {",
			"    if (hasNextByte() == true) return buffer[p++];",
			"    return -1;",
			"  }",
			"  private static boolean isPrintable(int n) {",
			"    return 33 <= n && n <= 126;",
			"  }",
			"  private void skip() {",
			"    while (hasNextByte() && !isPrintable(buffer[p])) p++;",
			"  }",
			"  public boolean hasNext() {",
			"    skip();",
			"    return hasNextByte();",
			"  }",
			"  public String next() {",
			"    if(!hasNext()) throw new NoSuchElementException();",
			"    StringBuilder sb = new StringBuilder();",
			"    int temp = readByte();",
			"    while (isPrintable(temp)) {",
			"      sb.appendCodePoint(temp);",
			"      temp = readByte();",
			"    }",
			"    return sb.toString();",
			"  }",
			"  public int nextInt() {",
			"    return Math.toIntExact(nextLong());",
			"  }",
			"  public int[] nextInts(int n) {",
			"    int[] ar = new int[n];",
			"    for (int i = 0; i < n; i++) ar[i] = nextInt();",
			"    return ar;",
			"  }",
			"  public long nextLong() {",
			"    if(!hasNext()) throw new NoSuchElementException();",
			"    boolean minus = false;",
			"    int temp = readByte();",
			"    if (temp == '-') {",
			"      minus = true;",
			"      temp = readByte();",
			"    }",
			"    if (temp < '0' || '9' < temp) throw new NumberFormatException();",
			"    long n = 0;",
			"    while (isPrintable(temp)) {",
			"      if ('0' <= temp && temp <= '9') {",
			"        n *= 10;",
			"        n += temp - '0';",
			"      }",
			"      temp = readByte();",
			"    }",
			"    return minus ? -n : n;",
			"  }",
			"}"
		],
		"description": "java templete"
	}// }
}
